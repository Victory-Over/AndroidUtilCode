/*
 1. add
    signing.keyId=xx
    signing.password=xx
    signing.secretKeyRingFile=/Users/xx/secring.gpg
    ossrhUsername=xx
    ossrhPassword=xx
    in root local.properties

 2. copy the file to the directory of gradle, and apply the file in the module
 ext {
    groupId = Config.modules.lib_utilcode.groupId
    artifactId = Config.modules.lib_utilcode.artifactId
    version = Config.modules.lib_utilcode.version
    website = "https://github.com/Blankj/AndroidUtilCode"
}
 apply from: "${rootDir.path}/config/publish.gradle"

 3. execute following command to publish
 ./gradlew :xxmodule:publish2Local  -> upload to mavenLocal
 ./gradlew :xxmodule:publish2Remote -> upload to mavenCentral
*/

apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.multiPublishMode = true

File localPropertiesFile = project.rootProject.file("local.properties");
if (!localPropertiesFile.exists()) {
    return
}

Properties properties = new Properties()
properties.load(new FileInputStream(localPropertiesFile))
properties.each { name, value -> ext[name] = value }

if (isAndroidEnv(project)) {
    // This generates sources.jar
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += configurations.compile
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
} else {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

if (project.hasProperty("kotlin")) {
    // Disable creating javadocs
    project.tasks.withType(Javadoc) {
        enabled = false
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version project.ext.version
        links "http://docs.oracle.com/javase/7/docs/api"
        title "${project.ext.artifactId} ${project.ext.version}"
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

static def isAndroidEnv(Project project) {
    return project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')
}

task publish2Local(type: GradleBuild) {
    tasks = ['assemble', 'publishReleasePublicationToMavenLocal']
}

task publish2Remote(type: GradleBuild) {
    tasks = ['assemble', 'publishReleasePublicationToMavenRepository']
}